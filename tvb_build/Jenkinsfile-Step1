pipeline {
    agent any

    environment {
        FULL_DOCKER_IMAGE_NAME = 'docker-repository.codemart.ro/tvb-build'
        LATEST_TAG = 'latest'
    }

    stages {
        stage ('Build docker image') {
            steps {
                script {
                    LAST_SHA = sh (script: "curl -s 'https://api.github.com/repos/the-virtual-brain/tvb-root/commits' | grep sha | head -1 | tr '\"' '_'", returnStdout: true).trim()
                    def dockerImage = docker.build("${FULL_DOCKER_IMAGE_NAME}:${env.BUILD_ID}", "--build-arg LAST_SHA='${LAST_SHA}' tvb_build/docker")
                    dockerImage.push()
                    dockerImage.push('${LATEST_TAG}')
                }
            }
        }
        stage ('Build TVB documentation') {
            agent {
                docker {
                    image '${FULL_DOCKER_IMAGE_NAME}:${LATEST_TAG}'
                }
            }
            steps {
                sh '''#!/bin/bash
                    source activate tvb-docs
                    cd tvb_build
                    bash install_full_tvb.sh
                    python build_step1.py
                '''
                archiveArtifacts artifacts: 'tvb_build/build/*.zip'
            }
        }
        stage ('Build for Pypi') {
            agent {
                docker {
                    image '${FULL_DOCKER_IMAGE_NAME}:${LATEST_TAG}'
                }
            }
            steps {
                sh '''#!/bin/bash
                    rm -rf dist
                    source activate tvb-run
                    cd tvb_build
                    bash package_for_pip.sh
                '''
                archiveArtifacts artifacts: 'dist/*'
            }
        }
        stage ('Compute coverage') {
            agent {
                docker {
                    image '${FULL_DOCKER_IMAGE_NAME}:${LATEST_TAG}'
                }
            }
            steps {
                sh '''#!/bin/bash
                    source activate tvb-run
                    rm -rf TEST_OUTPUT
                    mkdir TEST_OUTPUT
                    cd tvb_build
                    bash install_full_tvb.sh
                    cd ../scientific_library
                    py.test --cov-config .coveragerc --cov=tvb tvb/tests --cov-branch --cov-report xml:../TEST_OUTPUT/coverage_lib.xml --junitxml=../TEST_OUTPUT/results_lib.xml
                    cd ../framework_tvb
                    py.test --cov-config .coveragerc --cov=tvb tvb/tests --cov-branch --cov-report xml:../TEST_OUTPUT/coverage_frw.xml --junitxml=../TEST_OUTPUT/results_frw.xml
                    exit 0
                '''
                 junit 'TEST_OUTPUT/results_*.xml'
                 step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'TEST_OUTPUT/coverage_*.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
            }
        }
    }
    post {
        changed {
            mail to: 'lia.domide@codemart.ro',
            subject: "Jenkins Pipeline ${currentBuild.fullDisplayName} changed status",
            body: """
                Result: ${currentBuild.result}
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'
                Check console output at ${env.BUILD_URL}"""
        }
    }
}